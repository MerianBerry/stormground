#version 460 core

#define SG_RECTANGLE_F 0
#define SG_CIRCLE_F    1
#define SG_TRIANGLE_F  2
#define SG_LINE        3

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;

struct Primitive {
  float c[3];
  float p1[2];
  float p2[2];
  float p3[2];
  float p4[2];
  int   type;
};

layout (std430, binding = 1) buffer SSBO {
  float     time;
  int       primc;
  Primitive primv[];
}

ssbo;

void drawCircleF(ivec2 pix_coords, int x, int y, int i);

void drawRectF (ivec2 pix_coords, int x, int y, int i);

void drawRect (ivec2 pix_coords, int x, int y, int i);

void drawTriF (ivec2 pix_coords, float x, float y, int i);

void drawLine (ivec2 pix_coords, float x, float y, int i);

void main() {
  // imageStore (screen, ivec2 (1, 1), vec4 (ssbo.primv[i].p1[0],
  // ssbo.primv[i].p1[1], 0.0, 1.0));

  ivec2 pix_coords = ivec2 (gl_GlobalInvocationID.xy);

  ivec2 dims = imageSize (screen);
  int x    = pix_coords.x;
  int y    = pix_coords.y;
  imageStore (screen, pix_coords, vec4 (0, 0, 0, 1.0));

  for (int i = 0; i < ssbo.primc; ++i) {
    switch(ssbo.primv[i].type) {
      case SG_RECTANGLE_F: {
        if (ssbo.primv[i].p3[0] == 1.0) {
          drawRect (pix_coords, x, y, i);
        } else {
          drawRectF (pix_coords, x, y, i);
        }
      }
      break;
      case SG_CIRCLE_F: {
        drawCircleF(pix_coords, x, y, i);
      }
      break;
      case SG_TRIANGLE_F: {
        drawTriF (pix_coords, x, y, i);
      }
      break;
      case SG_LINE: {
        drawLine(pix_coords, x, y, i);
      }
    }
  }
}

void drawCircleF(ivec2 pix_coords, int x, int y, int i) {
  float x2 = x - ssbo.primv[i].p1[0];
  float y2 = y - ssbo.primv[i].p1[1];
  float dst = sqrt(x2 * x2 + y2 * y2);
  if (dst < ssbo.primv[i].p2[0] && dst >= ssbo.primv[i].p2[1]) {
    imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
  }
}

float sign (vec2 p1, vec2 p2, vec2 p3) {
  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

bool PointInTriangle (vec2 pt, vec2 v1, vec2 v2, vec2 v3) {
  float d1, d2, d3;
  bool  has_neg, has_pos;

  d1 = sign (pt, v1, v2);
  d2 = sign (pt, v2, v3);
  d3 = sign (pt, v3, v1);

  has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);
  has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);

  return !(has_neg && has_pos);
}

void drawRectF (ivec2 pix_coords, int x, int y, int i) {
  ivec2 dims = imageSize (screen);
  ivec2 p1 = ivec2 (ssbo.primv[i].p1[0], ssbo.primv[i].p1[1]);
  ivec2 p2 = ivec2 (ssbo.primv[i].p2[0], ssbo.primv[i].p2[1]);
  ivec2 p = ivec2(x, y);

  if (x>=p1.x && y>=p1.y && x<=p2.x && y<=p2.y)
    imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
}

void drawRect (ivec2 pix_coords, int x, int y, int i) {
  ivec2 p1 = ivec2 (ssbo.primv[i].p1[0], ssbo.primv[i].p1[1]);
  ivec2 p2 = ivec2 (ssbo.primv[i].p2[0], ssbo.primv[i].p2[1]);
  ivec2 p = ivec2(x, y);

  if ((x==p1.x || y==p1.y || x==p2.x || y==p2.y) && x>=p1.x && y>=p1.y && x<p2.x+1 && y<p2.y+1)
    imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
}

void drawTriF (ivec2 pix_coords, float x, float y, int i) {
  vec2 p1 = vec2 (ssbo.primv[i].p1[0], ssbo.primv[i].p1[1]);
  vec2 p2 = vec2 (ssbo.primv[i].p2[0], ssbo.primv[i].p2[1]);
  vec2 p3 = vec2 (ssbo.primv[i].p3[0], ssbo.primv[i].p3[1]);

  if (PointInTriangle (vec2 (x, y), p1, p2, p3))
    imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
}

bool within(float x, float y, float z) {
  if (y < z) {
    return x >= y && x <= z;
  } else 
    return x >= z && z <= y;
}

float lineFun(float m, float x, float a, float b) {
  return m*(x - a) + b;
}

void drawLine (ivec2 pix_coords, float x, float y, int i) {
  vec2 p1 = vec2 (ssbo.primv[i].p1[0], ssbo.primv[i].p1[1]);
  vec2 p2 = vec2 (ssbo.primv[i].p2[0], ssbo.primv[i].p2[1]);
  if (p2.x - p1.x == 0.0) {
    if (within(y, p1.y, p2.y) && within(x, p1.x-0.4, p2.x+0.4)) {
      imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
    }
    return;
  }
  float m = (p2.y - p1.y) / (p2.x - p1.x);
  float o = lineFun(m, x, p1.x, p1.y);
  if (within(y, o-0.5, o+0.5) && within(x, p1.x-0.5, p2.x+0.5)) {
    imageStore (
        screen, pix_coords,
        vec4 (ssbo.primv[i].c[0], ssbo.primv[i].c[1], ssbo.primv[i].c[2], 1.0));
  }
}